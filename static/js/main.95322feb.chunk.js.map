{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","home","aboutText","onClick","toogleMode","htmlFor","defaultProps","about","Textform","useState","text","setText","style","color","Heading","backgroundColor","value","onChange","event","target","rows","upText","toUpperCase","showalert","lowText","toLowerCase","split","length","About","setstyle","btntext","setbtntext","Alert","alert","role","msg","App","setalert","message","setTimeout","setmode","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.95322feb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarNavAltMarkup\"\r\n            aria-controls=\"navbarNavAltMarkup\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n            <div className=\"navbar-nav\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                {props.home}\r\n              </Link>\r\n              <Link className=\"nav-link active\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n             </div>\r\n          </div>\r\n        </div>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n \r\n <input className=\"form-check-input\" onClick={props.toogleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n<label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Mode</label>\r\n</div>  \r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title:PropTypes.string,\r\n  about:PropTypes.string,\r\n  home:PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title:'Yasir',\r\n    about:'about'\r\n}","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Textform(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const handleupClick = () => {\r\n    // console.log('uppercase was clicked' + text);\r\n    let upText = text.toUpperCase();\r\n    setText(upText);\r\n    props.showalert('converted to upper-case ','Sucess ');\r\n  };\r\n  const handleloClick = () => {\r\n    // console.log('lowercase was clicked' + text);\r\n    let lowText = text.toLowerCase();\r\n    setText(lowText);\r\n    props.showalert('converted to lovercase ','Sucess ');\r\n  };\r\n\r\n  const handleonChange = (event) => {\r\n    // console.log('on change');\r\n    setText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div className = 'container' style ={{color:props.mode==='dark'?'white':'black'}}>\r\n      <h1>{props.Heading}</h1>\r\n\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"myBox\" className=\"form-label\"></label>\r\n        <textarea\r\n        style ={{backgroundColor:props.mode==='dark'?'grey':'white',\r\n        color:props.mode==='dark'?'white':'black'}}\r\n          className=\"form-control\"\r\n          id=\"myBox\"\r\n          value={text}\r\n          onChange={handleonChange}\r\n          rows=\"8\"\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleupClick}>\r\n        {\" \"}\r\n        Convert To Upper-Case\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleloClick}>\r\n        {\" \"}\r\n        Convert To Lower-Case\r\n      </button>\r\n     \r\n    </div>\r\n    <div className=\"container my-2\"style ={{color:props.mode==='dark'?'white':'black'}}>\r\n      <h2>Your character summary</h2>\r\n      <p>{text.split(\" \").length-1} word have {text.length} characters</p>\r\n      <p>{0.008*text.split(\" \").length} Minutes read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:'Enter something  in the textboxabove to the preview it here'}</p>\r\n       {text}\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextform.propTypes = {\r\n  Text: PropTypes.string,\r\n  Heading: PropTypes.string,\r\n};\r\n","import React,{useState} from \"react\";\r\n\r\nexport default function About() {\r\n    const [style, setstyle] = useState(\r\n        {\r\n            color:'black',\r\n            backgroundColor:'white'\r\n        }\r\n    )\r\n    const [btntext, setbtntext] = useState('Enable Dark Mode')\r\n    const toogleStyle =()=>{\r\n      if(style.color === 'black'){\r\n          setstyle({\r\n              color:'white',\r\n              backgroundColor:'black'\r\n          })\r\n          setbtntext('Enable Light Mode')\r\n      } else{\r\n          setstyle({\r\n              color:'black',\r\n              backgroundColor:'white'\r\n          })\r\n          setbtntext('Enable Dark Mode')\r\n      }\r\n    }\r\n  return (\r\n\r\n      <>\r\n    <div className=\"container my-3\">\r\n      <h1>About Us </h1>\r\n      <div className=\"accordion\" style={style} id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n            style={style}\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\"style={style}>\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n            style={style}\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\"style={style}>\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n            style={style}\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={style}>\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    <button type=\"button\" onClick={toogleStyle} className=\"btn btn-outline-dark my-3\">{btntext}</button>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        \r\n          props.alert&& <div className='alert alert-warning alert-dismissible fade show' role=\"alert\">\r\n                <strong>{props.alert.type}</strong>{props.alert.msg}\r\n                \r\n            </div>\r\n        \r\n    )\r\n}\r\n","import Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport Textform from \"./components/Textform\";\nimport About from './components/About'\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch , Route  } from \"react-router-dom\";\nfunction App() {\n const [alert, setalert] = useState(null)\n const showalert=(message,type)=>{\n   setalert({\n     msg:message,\n     type:type\n   })\n   setTimeout(()=>{\n    setalert(null)\n   },1500)\n   \n \n }\n  let [mode, setmode] = useState('light')\n  const toogleMode =()=>{\n    if(mode==='light'){\n      setmode('dark');\n      document.body.style.backgroundColor='grey'\n      showalert(' darkmode has been enabled', ' Sucess');\n    }else{\n      setmode('light')\n      document.body.style.backgroundColor='white';\n      showalert(' lightmode has been enabled', ' Sucess');\n    }\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" aboutText=\"About\" home=\"Home\" mode={mode} toogleMode={toogleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <Textform showalert={showalert} Heading=\"Enter Your Text To Analyze\" mode={mode}/>\n          </Route>\n        </Switch>\n        \n        {/* <div className=\"container\">{<About/> }</div> */}\n      </div>\n        </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}